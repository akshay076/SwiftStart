{
    "id": "b2ddfabf-a0d3-4829-a900-400d677b65d8",
    "data": {
      "nodes": [
        {
          "data": {
            "id": "RAG-System-l92Ct",
            "node": {
              "description": "## Enterprise-Ready SwiftStart Assistant\n\nThis flow implements governance-focused onboarding with:\n\n- Data Governance: PII detection, compliance logging\n- Responsible AI: Bias detection, fairness controls\n- Content Validation: Filter sensitive information, ensure compliance\n- Access Controls: Role-based information access",
              "display_name": "SwiftStart Overview",
              "documentation": "",
              "template": {
                "backgroundColor": "blue"
              }
            }
          },
          "dragging": false,
          "height": 332,
          "id": "RAG-System-l92Ct",
          "measured": {
            "height": 332,
            "width": 325
          },
          "position": {
            "x": 133.95771636602308,
            "y": 753.6499167055161
          },
          "positionAbsolute": {
            "x": 66.38770028934243,
            "y": 749.744424427066
          },
          "resizing": false,
          "selected": false,
          "style": {
            "height": 250,
            "width": 324
          },
          "type": "noteNode",
          "width": 324
        },
        {
          "data": {
            "id": "note-zk2Ct",
            "node": {
              "description": "### ðŸ’¡ Add your Google API key to both model components ðŸ‘‡",
              "display_name": "",
              "documentation": "",
              "template": {
                "backgroundColor": "transparent"
              }
            },
            "type": "note"
          },
          "dragging": false,
          "height": 324,
          "id": "note-zk2Ct",
          "measured": {
            "height": 324,
            "width": 326
          },
          "position": {
            "x": 1075.829573520873,
            "y": 657.2057655038416
          },
          "positionAbsolute": {
            "x": 1075.829573520873,
            "y": 657.2057655038416
          },
          "resizing": false,
          "selected": false,
          "style": {
            "height": 324,
            "width": 324
          },
          "type": "noteNode",
          "width": 327
        },
        {
          "id": "ChatInput-TgJla",
          "type": "genericNode",
          "position": {
            "x": 660,
            "y": 930
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "files": {
                  "trace_as_metadata": true,
                  "file_path": "",
                  "fileTypes": [
                    "txt", "md", "pdf", "docx"
                  ],
                  "list": true,
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "files",
                  "value": "",
                  "display_name": "Company Documents",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Upload company documents for knowledge retrieval.",
                  "title_case": false,
                  "type": "file",
                  "_input_type": "FileInput"
                },
                "input_value": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "required": false,
                  "placeholder": "Ask a question or request an onboarding checklist...",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Question",
                  "advanced": false,
                  "input_types": [],
                  "dynamic": false,
                  "info": "Your question about onboarding or request for a checklist.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                },
                "access_level": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Standard User",
                    "Manager",
                    "HR Admin",
                    "System Admin"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "access_level",
                  "value": "Standard User",
                  "display_name": "Access Level",
                  "advanced": true,
                  "dynamic": false,
                  "info": "User access level for governance purposes",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                }
              },
              "description": "Ask onboarding questions or request checklists",
              "icon": "MessagesSquare",
              "base_classes": [
                "Message"
              ],
              "display_name": "Onboarding Query",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": true
                },
                {
                  "types": [
                    "str"
                  ],
                  "selected": "str",
                  "name": "access_level",
                  "display_name": "Access Level",
                  "method": "get_access_level",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "input_value",
                "files",
                "access_level"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "ChatInput",
            "id": "ChatInput-TgJla"
          },
          "selected": false,
          "measured": {
            "width": 192,
            "height": 150
          }
        },
        {
          "id": "PIIDetector-3X94R",
          "type": "genericNode",
          "position": {
            "x": 400,
            "y": 820
          },
          "data": {
            "node": {
              "template": {
                "script": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "script",
                  "value": "import re\nfrom datetime import datetime\n\ndef detect_pii(text_content):\n    \"\"\"Detect and mask PII in content\"\"\"\n    # Define PII detection patterns\n    pii_patterns = {\n        'email': r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b',\n        'phone': r'\\b(\\+\\d{1,2}\\s)?\\(?(\\d{3})\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}\\b',\n        'ssn': r'\\b\\d{3}-\\d{2}-\\d{4}\\b',\n        'credit_card': r'\\b(?:\\d{4}[- ]?){3}\\d{4}\\b'\n    }\n    \n    # Initialize result\n    detection_results = {\n        'has_pii': False,\n        'pii_types_found': [],\n        'masked_content': text_content,\n        'sensitivity_level': 'Standard',\n        'governance_tags': ['Processed']\n    }\n    \n    # Check for PII and mask it\n    for pii_type, pattern in pii_patterns.items():\n        matches = re.findall(pattern, text_content, re.IGNORECASE)\n        if matches:\n            detection_results['has_pii'] = True\n            detection_results['pii_types_found'].append(pii_type)\n            \n            # Replace PII with masked version\n            if pii_type == 'email':\n                for match in set(re.findall(pattern, text_content)):\n                    try:\n                        username, domain = match.split('@')\n                        masked = f\"{username[0]}{'*' * (len(username)-2)}{username[-1]}@{domain}\"\n                        detection_results['masked_content'] = detection_results['masked_content'].replace(match, masked)\n                    except:\n                        # Fallback for unusual email formats\n                        detection_results['masked_content'] = detection_results['masked_content'].replace(match, \"[REDACTED-EMAIL]\")\n            else:\n                detection_results['masked_content'] = re.sub(pattern, f\"[REDACTED-{pii_type.upper()}]\", detection_results['masked_content'])\n    \n    # Set sensitivity level based on PII found\n    if 'ssn' in detection_results['pii_types_found'] or 'credit_card' in detection_results['pii_types_found']:\n        detection_results['sensitivity_level'] = 'Highly Sensitive'\n        detection_results['governance_tags'].append('PII-Critical')\n    elif detection_results['has_pii']:\n        detection_results['sensitivity_level'] = 'Sensitive'\n        detection_results['governance_tags'].append('PII-Standard')\n    \n    # Add audit information\n    detection_results['governance_tags'].append(f\"PII-Scan-Date:{datetime.now().strftime('%Y-%m-%d')}\")\n    \n    return detection_results",
                  "display_name": "PII Detection Script",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Script to detect and mask personally identifiable information",
                  "type": "code"
                },
                "text_content": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "text_content",
                  "value": "",
                  "display_name": "Text Content",
                  "advanced": false,
                  "input_types": ["Message"],
                  "dynamic": false,
                  "info": "Text content to scan for PII",
                  "type": "str"
                }
              },
              "description": "Detect and handle personally identifiable information",
              "icon": "Shield",
              "display_name": "PII Detector",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "dict"
                  ],
                  "selected": "dict",
                  "name": "result",
                  "display_name": "PII Analysis",
                  "method": "apply_script",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": false
                }
              ],
              "field_order": [
                "script",
                "text_content"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "PythonFunction",
            "id": "PIIDetector-3X94R"
          },
          "measured": {
            "width": 192,
            "height": 128
          }
        },
        {
          "id": "BiasDetector-7H31Q",
          "type": "genericNode",
          "position": {
            "x": 400,
            "y": 650
          },
          "data": {
            "node": {
              "template": {
                "script": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "script",
                  "value": "def detect_bias(user_query):\n    \"\"\"Detect potential bias in query and apply governance controls\"\"\"\n    # Analyze specific bias types\n    bias_types = []\n    bias_triggers = {\n        'gender_bias': ['male only', 'female only', 'men are better', 'women are better'],\n        'age_bias': ['too old', 'too young', 'only hire young', 'younger employees'],\n        'racial_bias': ['racial', 'ethnic background', 'culture fit'],\n        'disability_bias': ['disability', 'handicap', 'special needs']\n    }\n    \n    # Check for bias triggers in user query\n    for bias_type, triggers in bias_triggers.items():\n        if any(trigger in user_query.lower() for trigger in triggers):\n            bias_types.append(bias_type)\n    \n    # Prepare bias detection result\n    bias_detection = {\n        'bias_detected': len(bias_types) > 0,\n        'bias_types': bias_types,\n        'requires_fairness_review': len(bias_types) > 0,\n        'governance_controls': []\n    }\n    \n    # Add appropriate governance controls\n    if bias_detection['bias_detected']:\n        bias_detection['governance_controls'].append('FAIRNESS_CHECK_REQUIRED')\n        \n    # Add governance metadata\n    bias_detection['governance_tags'] = [\"BiasAnalyzed\"]\n    if bias_detection['bias_detected']:\n        bias_detection['governance_tags'].append(\"BiasDetected\")\n        \n    bias_detection['original_query'] = user_query\n    \n    return bias_detection",
                  "display_name": "Bias Detection Script",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Script to detect and handle bias in user queries",
                  "type": "code"
                },
                "user_query": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "user_query",
                  "value": "",
                  "display_name": "User Query",
                  "advanced": false,
                  "input_types": ["Message"],
                  "dynamic": false,
                  "info": "User query to check for bias",
                  "type": "str"
                }
              },
              "description": "Detect and handle bias in user queries",
              "icon": "Scale",
              "display_name": "Bias Detector",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "dict"
                  ],
                  "selected": "dict",
                  "name": "result",
                  "display_name": "Bias Assessment",
                  "method": "apply_script",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": false
                }
              ],
              "field_order": [
                "script",
                "user_query"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "PythonFunction",
            "id": "BiasDetector-7H31Q"
          },
          "measured": {
            "width": 192,
            "height": 128
          }
        },
        {
          "id": "GovernanceProcessor-4K89R",
          "type": "genericNode",
          "position": {
            "x": 800,
            "y": 750
          },
          "data": {
            "node": {
              "template": {
                "script": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "script",
                  "value": "def process_governance(pii_data, bias_data, user_query, access_level):\n    \"\"\"Process governance data and prepare enhanced controls\"\"\"\n    # Extract PII information\n    has_pii = pii_data.get('has_pii', False) if pii_data else False\n    pii_types = pii_data.get('pii_types_found', []) if pii_data else []\n    sensitivity_level = pii_data.get('sensitivity_level', 'Standard') if pii_data else 'Standard'\n    \n    # Extract bias information\n    bias_detected = bias_data.get('bias_detected', False) if bias_data else False\n    bias_types = bias_data.get('bias_types', []) if bias_data else []\n    \n    # Determine query category based on content\n    query_category = \"general\"\n    \n    if \"checklist\" in user_query.lower() or \"onboarding list\" in user_query.lower():\n        query_category = \"checklist\"\n    elif \"policy\" in user_query.lower() or \"regulation\" in user_query.lower() or \"rule\" in user_query.lower():\n        query_category = \"policy\"\n    \n    # Build governance controls\n    governance_controls = []\n    \n    # Add data minimization controls\n    governance_controls.append(\"DATA_MINIMIZATION: Only include necessary information in response\")\n    \n    # Add PII-related controls\n    if has_pii:\n        governance_controls.append(f\"PII_DETECTED: Detected {', '.join(pii_types)} - ensure no sensitive data in response\")\n    \n    # Add bias-related controls\n    if bias_detected:\n        governance_controls.append(f\"BIAS_CONTROLS: Detected {', '.join(bias_types)} - ensure fair and balanced response\")\n    \n    # Add access-level controls\n    if query_category == \"policy\" and access_level not in [\"HR Admin\", \"System Admin\"]:\n        governance_controls.append(\"ACCESS_CONTROL: Limited policy information for current access level\")\n    \n    # Common controls for all responses\n    governance_controls.append(\"ATTRIBUTION: Cite sources when referencing company policy\")\n    governance_controls.append(\"ACCOUNTABILITY: Clearly distinguish facts from recommendations\")\n    \n    # Build prompt enhancements\n    prompt_enhancements = {\n        \"query_category\": query_category,\n        \"governance_controls\": governance_controls,\n        \"sensitivity_level\": sensitivity_level,\n        \"requires_human_review\": bias_detected and len(bias_types) > 1,\n        \"governance_tags\": []\n    }\n    \n    # Add appropriate tags\n    if has_pii:\n        prompt_enhancements[\"governance_tags\"].append(\"PII-Controlled\")\n    if bias_detected:\n        prompt_enhancements[\"governance_tags\"].append(\"Bias-Controlled\")\n    if query_category == \"policy\":\n        prompt_enhancements[\"governance_tags\"].append(\"Policy-Access-Controlled\")\n    \n    # Add formatted controls text for prompt insertion\n    prompt_enhancements[\"controls_text\"] = \"\\n\".join(governance_controls)\n    \n    return prompt_enhancements",
                  "display_name": "Governance Processing Script",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Script to process governance data and enhance prompt",
                  "type": "code"
                },
                "pii_data": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "pii_data",
                  "value": "",
                  "display_name": "PII Data",
                  "advanced": false,
                  "input_types": ["dict"],
                  "dynamic": false,
                  "info": "PII detection results",
                  "type": "dict"
                },
                "bias_data": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "bias_data",
                  "value": "",
                  "display_name": "Bias Data",
                  "advanced": false,
                  "input_types": ["dict"],
                  "dynamic": false,
                  "info": "Bias detection results",
                  "type": "dict"
                },
                "user_query": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "user_query",
                  "value": "",
                  "display_name": "User Query",
                  "advanced": false,
                  "input_types": ["Message"],
                  "dynamic": false,
                  "info": "Original user query",
                  "type": "str"
                },
                "access_level": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": false,
                  "name": "access_level",
                  "value": "Standard User",
                  "display_name": "Access Level",
                  "advanced": false,
                  "input_types": ["str"],
                  "dynamic": false,
                  "info": "User access level",
                  "type": "str"
                }
              },
              "description": "Process governance data and enhance prompt",
              "icon": "GitFork",
              "display_name": "Governance Processor",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "dict"
                  ],
                  "selected": "dict",
                  "name": "result",
                  "display_name": "Governance Controls",
                  "method": "apply_script",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": false
                }
              ],
              "field_order": [
                "script",
                "pii_data",
                "bias_data",
                "user_query",
                "access_level"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "PythonFunction",
            "id": "GovernanceProcessor-4K89R"
          },
          "measured": {
            "width": 192,
            "height": 128
          }
        },
        {
          "id": "ContextBuilder-6G90Q",
          "type": "genericNode",
          "position": {
            "x": 1100,
            "y": 650
          },
          "data": {
            "node": {
              "template": {
                "prompt_template": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "prompt_template",
                  "value": "You are SwiftStart, an AI-powered onboarding assistant for Horizon Technologies. Your answers should follow enterprise governance standards.\n\nGOVERNANCE CONTROLS:\n{governance_controls}\n\nWhen answering questions:\n- Provide clear, concise information based on the context\n- Be welcoming and supportive in tone\n- Reference Horizon Technologies' specific practices when appropriate\n- If you don't have certain company-specific information, acknowledge this and provide general guidance\n- Suggest who the employee might contact for more details when necessary\n- Follow all governance controls listed above\n- Include sources of information where appropriate\n- Provide only factual information, clearly stating when something is your recommendation vs. company policy\n\nUser Question: {query}\n\nRemember to balance helpfulness with appropriate data governance.",
                  "display_name": "Question Context",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Template to format retrieved context with user query",
                  "type": "str"
                },
                "query": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "query",
                  "value": "",
                  "display_name": "Query",
                  "advanced": false,
                  "input_types": ["Message"],
                  "dynamic": false,
                  "info": "User query to answer",
                  "type": "str"
                },
                "governance_controls": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "governance_controls",
                  "value": "DATA_MINIMIZATION: Only include necessary information",
                  "display_name": "Governance Controls",
                  "advanced": false,
                  "input_types": ["dict"],
                  "dynamic": false,
                  "info": "Governance controls to apply",
                  "type": "str"
                }
              },
              "description": "Build context-enhanced prompt with governance",
              "icon": "Combine",
              "display_name": "Context Builder",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "output",
                  "display_name": "Output",
                  "method": "format",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": false
                }
              ],
              "field_order": [
                "prompt_template",
                "query",
                "governance_controls"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "PromptTemplate",
            "id": "ContextBuilder-6G90Q"
          },
          "measured": {
            "width": 192,
            "height": 128
          }
        },
        {
          "id": "GoogleGenerativeAIModel-mj24V",
          "type": "genericNode",
          "position": {
            "x": 1350,
            "y": 750
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "api_key": {
                  "load_from_db": false,
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "api_key",
                  "value": "AIzaSyBdYcTrkV4RYC1wE_-N8ZGVsOyeOaTDBjo",
                  "display_name": "Google API Key",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "The Google API Key to use for the Google Generative AI.",
                  "real_time_refresh": true,
                  "title_case": false,
                  "password": true,
                  "type": "str",
                  "_input_type": "SecretStrInput"
                },
                "input_value": {
                  "trace_as_input": true,
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Input",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageInput"
                },
                "model_name": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "gemini-1.5-pro"
                  ],
                  "options_metadata": [],
                  "combobox": true,
                  "dialog_inputs": {},
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "model_name",
                  "value": "gemini-1.5-pro",
                  "display_name": "Model",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The name of the model to use.",
                  "refresh_button": true,
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "temperature": {
                  "tool_mode": false,
                  "min_label": "",
                  "max_label": "",
                  "min_label_icon": "",
                  "max_label_icon": "",
                  "slider_buttons": false,
                  "slider_buttons_options": [],
                  "slider_input": false,
                  "range_spec": {
                    "step_type": "float",
                    "min": 0,
                    "max": 2,
                    "step": 0.01
                  },
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "temperature",
                  "value": 0.1,
                  "display_name": "Temperature",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Controls randomness. Lower values are more deterministic.",
                  "title_case": false,
                  "type": "slider",
                  "_input_type": "SliderInput"
                },
                "max_output_tokens": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "max_output_tokens",
                  "value": 2048,
                  "display_name": "Max Output Tokens",
                  "advanced": false,
                  "dynamic": false,
                  "info": "The maximum number of tokens to generate.",
                  "title_case": false,
                  "type": "int",
                  "_input_type": "IntInput"
                },
                "system_message": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "multiline": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "system_message",
                  "value": "You are SwiftStart, an AI-powered onboarding assistant for Horizon Technologies. Your purpose is to help new employees navigate their first days, weeks, and months at the company, while also supporting managers in creating effective onboarding experiences.\n\nYou operate under strict data governance and responsible AI principles:\n\n1. DATA MINIMIZATION: Only provide necessary information that answers the query without excessive details\n2. FAIRNESS: Ensure responses are unbiased and inclusive to all employees\n3. TRANSPARENCY: Clearly indicate limitations of your knowledge and sources of information\n4. SECURITY: Never disclose sensitive or confidential information beyond the user's access level\n5. ATTRIBUTION: Cite sources when referring to company policies\n6. ACCOUNTABILITY: Clearly distinguish between factual information vs. recommendations\n\nYour capabilities include:\n\n1. Answering questions about company policies, procedures, benefits, technical setup, and culture\n2. Creating structured onboarding checklists tailored to specific roles\n3. Explaining typical workflows and processes\n4. Providing guidance on where to find resources and who to contact for various needs\n5. Offering tips for successful integration into the team\n\nEnsure all your responses align with governance principles and provide helpful, accurate information.",
                  "display_name": "System Message",
                  "advanced": false,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "System message to pass to the model.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MultilineInput"
                }
              },
              "description": "Generate governance-compliant responses",
              "icon": "GoogleGenerativeAI",
              "base_classes": [
                "LanguageModel",
                "Message"
              ],
              "display_name": "Response Generator",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "text_output",
                  "display_name": "Message",
                  "method": "text_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": true
                },
                {
                  "types": [
                    "LanguageModel"
                  ],
                  "selected": "LanguageModel",
                  "name": "model_output",
                  "display_name": "Language Model",
                  "method": "build_model",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "required_inputs": [
                    "api_key"
                  ],
                  "allows_loop": false,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "input_value",
                "system_message",
                "model_name",
                "api_key",
                "temperature",
                "max_output_tokens"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "GoogleGenerativeAIModel",
            "id": "GoogleGenerativeAIModel-mj24V"
          },
          "selected": false,
          "measured": {
            "width": 320,
            "height": 781
          }
        },
        {
          "id": "ContentValidator-5R92L",
          "type": "genericNode",
          "position": {
            "x": 1650,
            "y": 750
          },
          "data": {
            "node": {
              "template": {
                "script": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "script",
                  "value": "import re\n\ndef validate_content(response_text, governance_data):\n    \"\"\"Validate and filter content based on governance rules\"\"\"\n    # Get governance information\n    governance_tags = governance_data.get('governance_tags', [])\n    sensitivity_level = governance_data.get('sensitivity_level', 'Standard')\n    query_category = governance_data.get('query_category', 'general')\n    \n    # Define validation checks\n    sensitivity_patterns = [\n        \"password\", \"social security\", \"ssn\", \"birth date\", \n        \"credit card\", \"bank account\", \"address\", \"salary\", \"compensation\"\n    ]\n    \n    format_patterns = [\n        \"**\", \"__\", \"*\", \"_\", \"#\",  # Markdown formatting\n        \"<script\", \"<style\", \"<img\", \"<a href\"  # HTML tags\n    ]\n    \n    bias_language_patterns = [\n        \"best for women\", \"best for men\", \"better for older\", \"better for younger\",\n        \"should be a man\", \"should be a woman\", \"only suitable for\"\n    ]\n    \n    # Initialize validation result\n    validation = {\n        'is_valid': True,\n        'issues_found': [],\n        'processed_content': response_text,\n        'governance_result': 'pass'\n    }\n    \n    # Check for sensitive information\n    for pattern in sensitivity_patterns:\n        if pattern in response_text.lower():\n            validation['is_valid'] = False\n            validation['issues_found'].append(f\"Contains sensitive information: {pattern}\")\n            validation['processed_content'] = validation['processed_content'].replace(pattern, \"[REDACTED]\")\n    \n    # Remove any formatting\n    for pattern in format_patterns:\n        if pattern in validation['processed_content']:\n            validation['issues_found'].append(\"Contains formatting that needed removal\")\n            # Replace formatting with appropriate alternative\n            if pattern in [\"**\", \"__\", \"*\", \"_\"]:\n                validation['processed_content'] = validation['processed_content'].replace(pattern, \"\")\n            elif pattern.startswith(\"<\"):\n                # Simple regex-like replacement for HTML tags\n                validation['processed_content'] = re.sub(f\"{pattern}[^>]*>\", \"\", validation['processed_content'])\n    \n    # Check for biased language\n    for pattern in bias_language_patterns:\n        if pattern in response_text.lower():\n            validation['is_valid'] = False\n            validation['issues_found'].append(f\"Contains potentially biased language: {pattern}\")\n            validation['processed_content'] = validation['processed_content'].replace(pattern, \"[NEUTRAL ALTERNATIVE]\")\n    \n    # Special handling for checklists\n    if query_category == 'checklist':\n        # Ensure checklist doesn't have too many items\n        if response_text.count('- ') > 20 or response_text.count('* ') > 20:\n            validation['issues_found'].append(\"Checklist exceeds maximum recommended items\")\n            validation['governance_result'] = 'warning'\n    \n    # Add governance notice if issues were found\n    if validation['issues_found']:\n        validation['governance_result'] = 'modified'\n        # Only add the notice if it doesn't already exist\n        if not validation['processed_content'].endswith(']'):\n            validation['processed_content'] += \"\\n\\n[Note: This response has been modified to comply with data governance policies.]\"\n    \n    # Add compliance metadata\n    validation['compliance_record'] = {\n        \"validation_status\": validation['governance_result'],\n        \"issues_detected\": len(validation['issues_found']),\n        \"sensitivity_level\": sensitivity_level,\n        \"governance_tags\": governance_tags + [\"ContentValidated\"]\n    }\n    \n    return validation['processed_content']",
                  "display_name": "Content Validation Script",
                  "advanced": false,
                  "dynamic": false,
                  "info": "Script to validate and filter content based on governance rules",
                  "type": "code"
                },
                "response_text": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "response_text",
                  "value": "",
                  "display_name": "Response Text",
                  "advanced": false,
                  "input_types": ["Message"],
                  "dynamic": false,
                  "info": "Raw response text from the model",
                  "type": "str"
                },
                "governance_data": {
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "multiline": true,
                  "name": "governance_data",
                  "value": "",
                  "display_name": "Governance Data",
                  "advanced": false,
                  "input_types": ["dict"],
                  "dynamic": false,
                  "info": "Governance information",
                  "type": "dict"
                }
              },
              "description": "Validate content against governance rules",
              "icon": "Shield",
              "display_name": "Content Validator",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "str"
                  ],
                  "selected": "str",
                  "name": "result",
                  "display_name": "Validated Content",
                  "method": "apply_script",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": false
                }
              ],
              "field_order": [
                "script",
                "response_text",
                "governance_data"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "PythonFunction",
            "id": "ContentValidator-5R92L"
          },
          "measured": {
            "width": 192,
            "height": 128
          }
        },
        {
          "id": "ChatOutput-XPCO0",
          "type": "genericNode",
          "position": {
            "x": 1900,
            "y": 750
          },
          "data": {
            "node": {
              "template": {
                "_type": "Component",
                "input_value": {
                  "trace_as_metadata": true,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": true,
                  "placeholder": "",
                  "show": true,
                  "name": "input_value",
                  "value": "",
                  "display_name": "Text",
                  "advanced": false,
                  "input_types": [
                    "Data",
                    "DataFrame",
                    "Message",
                    "str"
                  ],
                  "dynamic": false,
                  "info": "Message to be passed as output.",
                  "title_case": false,
                  "type": "other",
                  "_input_type": "HandleInput"
                },
                "sender": {
                  "tool_mode": false,
                  "trace_as_metadata": true,
                  "options": [
                    "Machine",
                    "User"
                  ],
                  "options_metadata": [],
                  "combobox": false,
                  "dialog_inputs": {},
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender",
                  "value": "Machine",
                  "display_name": "Sender Type",
                  "advanced": true,
                  "dynamic": false,
                  "info": "Type of sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "DropdownInput"
                },
                "sender_name": {
                  "tool_mode": false,
                  "trace_as_input": true,
                  "trace_as_metadata": true,
                  "load_from_db": false,
                  "list": false,
                  "list_add_label": "Add More",
                  "required": false,
                  "placeholder": "",
                  "show": true,
                  "name": "sender_name",
                  "value": "SwiftStart",
                  "display_name": "Sender Name",
                  "advanced": true,
                  "input_types": [
                    "Message"
                  ],
                  "dynamic": false,
                  "info": "Name of the sender.",
                  "title_case": false,
                  "type": "str",
                  "_input_type": "MessageTextInput"
                }
              },
              "description": "Display governance-compliant response",
              "icon": "MessagesSquare",
              "base_classes": [
                "Message"
              ],
              "display_name": "Response Output",
              "custom_fields": {},
              "output_types": [],
              "outputs": [
                {
                  "types": [
                    "Message"
                  ],
                  "selected": "Message",
                  "name": "message",
                  "display_name": "Message",
                  "method": "message_response",
                  "value": "__UNDEFINED__",
                  "cache": true,
                  "allows_loop": false,
                  "tool_mode": true
                }
              ],
              "field_order": [
                "input_value",
                "sender",
                "sender_name"
              ],
              "beta": false,
              "legacy": false,
              "edited": false,
              "metadata": {},
              "tool_mode": false,
              "lf_version": "1.2.0"
            },
            "showNode": true,
            "type": "ChatOutput",
            "id": "ChatOutput-XPCO0"
          },
          "selected": false,
          "measured": {
            "width": 192,
            "height": 150
          }
        }
      ],
      "edges": [
        {
          "source": "ChatInput-TgJla",
          "sourceHandle": "{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-TgJlaÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "PIIDetector-3X94R",
          "targetHandle": "{Å“fieldNameÅ“:Å“text_contentÅ“,Å“idÅ“:Å“PIIDetector-3X94RÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "text_content",
              "id": "PIIDetector-3X94R",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-TgJla",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge1",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-TgJla",
          "sourceHandle": "{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-TgJlaÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "BiasDetector-7H31Q",
          "targetHandle": "{Å“fieldNameÅ“:Å“user_queryÅ“,Å“idÅ“:Å“BiasDetector-7H31QÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "user_query",
              "id": "BiasDetector-7H31Q",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-TgJla",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge2",
          "animated": false,
          "className": ""
        },
        {
          "source": "PIIDetector-3X94R",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PythonFunctionÅ“,Å“idÅ“:Å“PIIDetector-3X94RÅ“,Å“nameÅ“:Å“resultÅ“,Å“output_typesÅ“:[Å“dictÅ“]}",
          "target": "GovernanceProcessor-4K89R",
          "targetHandle": "{Å“fieldNameÅ“:Å“pii_dataÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“inputTypesÅ“:[Å“dictÅ“],Å“typeÅ“:Å“dictÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "pii_data",
              "id": "GovernanceProcessor-4K89R",
              "inputTypes": [
                "dict"
              ],
              "type": "dict"
            },
            "sourceHandle": {
              "dataType": "PythonFunction",
              "id": "PIIDetector-3X94R",
              "name": "result",
              "output_types": [
                "dict"
              ]
            }
          },
          "id": "edge3",
          "animated": false,
          "className": ""
        },
        {
          "source": "BiasDetector-7H31Q",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PythonFunctionÅ“,Å“idÅ“:Å“BiasDetector-7H31QÅ“,Å“nameÅ“:Å“resultÅ“,Å“output_typesÅ“:[Å“dictÅ“]}",
          "target": "GovernanceProcessor-4K89R",
          "targetHandle": "{Å“fieldNameÅ“:Å“bias_dataÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“inputTypesÅ“:[Å“dictÅ“],Å“typeÅ“:Å“dictÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "bias_data",
              "id": "GovernanceProcessor-4K89R",
              "inputTypes": [
                "dict"
              ],
              "type": "dict"
            },
            "sourceHandle": {
              "dataType": "PythonFunction",
              "id": "BiasDetector-7H31Q",
              "name": "result",
              "output_types": [
                "dict"
              ]
            }
          },
          "id": "edge4",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-TgJla",
          "sourceHandle": "{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-TgJlaÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "GovernanceProcessor-4K89R",
          "targetHandle": "{Å“fieldNameÅ“:Å“user_queryÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "user_query",
              "id": "GovernanceProcessor-4K89R",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-TgJla",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge5",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-TgJla",
          "sourceHandle": "{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-TgJlaÅ“,Å“nameÅ“:Å“access_levelÅ“,Å“output_typesÅ“:[Å“strÅ“]}",
          "target": "GovernanceProcessor-4K89R",
          "targetHandle": "{Å“fieldNameÅ“:Å“access_levelÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“inputTypesÅ“:[Å“strÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "access_level",
              "id": "GovernanceProcessor-4K89R",
              "inputTypes": [
                "str"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-TgJla",
              "name": "access_level",
              "output_types": [
                "str"
              ]
            }
          },
          "id": "edge6",
          "animated": false,
          "className": ""
        },
        {
          "source": "GovernanceProcessor-4K89R",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PythonFunctionÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“nameÅ“:Å“resultÅ“,Å“output_typesÅ“:[Å“dictÅ“]}",
          "target": "ContextBuilder-6G90Q",
          "targetHandle": "{Å“fieldNameÅ“:Å“governance_controlsÅ“,Å“idÅ“:Å“ContextBuilder-6G90QÅ“,Å“inputTypesÅ“:[Å“dictÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "governance_controls",
              "id": "ContextBuilder-6G90Q",
              "inputTypes": [
                "dict"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "PythonFunction",
              "id": "GovernanceProcessor-4K89R",
              "name": "result",
              "output_types": [
                "dict"
              ]
            }
          },
          "id": "edge7",
          "animated": false,
          "className": ""
        },
        {
          "source": "ChatInput-TgJla",
          "sourceHandle": "{Å“dataTypeÅ“:Å“ChatInputÅ“,Å“idÅ“:Å“ChatInput-TgJlaÅ“,Å“nameÅ“:Å“messageÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "ContextBuilder-6G90Q",
          "targetHandle": "{Å“fieldNameÅ“:Å“queryÅ“,Å“idÅ“:Å“ContextBuilder-6G90QÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "query",
              "id": "ContextBuilder-6G90Q",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "ChatInput",
              "id": "ChatInput-TgJla",
              "name": "message",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge8",
          "animated": false,
          "className": ""
        },
        {
          "source": "ContextBuilder-6G90Q",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PromptTemplateÅ“,Å“idÅ“:Å“ContextBuilder-6G90QÅ“,Å“nameÅ“:Å“outputÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "GoogleGenerativeAIModel-mj24V",
          "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“GoogleGenerativeAIModel-mj24VÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "GoogleGenerativeAIModel-mj24V",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "PromptTemplate",
              "id": "ContextBuilder-6G90Q",
              "name": "output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge9",
          "animated": false,
          "className": ""
        },
        {
          "source": "GoogleGenerativeAIModel-mj24V",
          "sourceHandle": "{Å“dataTypeÅ“:Å“GoogleGenerativeAIModelÅ“,Å“idÅ“:Å“GoogleGenerativeAIModel-mj24VÅ“,Å“nameÅ“:Å“text_outputÅ“,Å“output_typesÅ“:[Å“MessageÅ“]}",
          "target": "ContentValidator-5R92L",
          "targetHandle": "{Å“fieldNameÅ“:Å“response_textÅ“,Å“idÅ“:Å“ContentValidator-5R92LÅ“,Å“inputTypesÅ“:[Å“MessageÅ“],Å“typeÅ“:Å“strÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "response_text",
              "id": "ContentValidator-5R92L",
              "inputTypes": [
                "Message"
              ],
              "type": "str"
            },
            "sourceHandle": {
              "dataType": "GoogleGenerativeAIModel",
              "id": "GoogleGenerativeAIModel-mj24V",
              "name": "text_output",
              "output_types": [
                "Message"
              ]
            }
          },
          "id": "edge10",
          "animated": false,
          "className": ""
        },
        {
          "source": "GovernanceProcessor-4K89R",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PythonFunctionÅ“,Å“idÅ“:Å“GovernanceProcessor-4K89RÅ“,Å“nameÅ“:Å“resultÅ“,Å“output_typesÅ“:[Å“dictÅ“]}",
          "target": "ContentValidator-5R92L",
          "targetHandle": "{Å“fieldNameÅ“:Å“governance_dataÅ“,Å“idÅ“:Å“ContentValidator-5R92LÅ“,Å“inputTypesÅ“:[Å“dictÅ“],Å“typeÅ“:Å“dictÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "governance_data",
              "id": "ContentValidator-5R92L",
              "inputTypes": [
                "dict"
              ],
              "type": "dict"
            },
            "sourceHandle": {
              "dataType": "PythonFunction",
              "id": "GovernanceProcessor-4K89R",
              "name": "result",
              "output_types": [
                "dict"
              ]
            }
          },
          "id": "edge11",
          "animated": false,
          "className": ""
        },
        {
          "source": "ContentValidator-5R92L",
          "sourceHandle": "{Å“dataTypeÅ“:Å“PythonFunctionÅ“,Å“idÅ“:Å“ContentValidator-5R92LÅ“,Å“nameÅ“:Å“resultÅ“,Å“output_typesÅ“:[Å“strÅ“]}",
          "target": "ChatOutput-XPCO0",
          "targetHandle": "{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-XPCO0Å“,Å“inputTypesÅ“:[Å“DataÅ“,Å“DataFrameÅ“,Å“MessageÅ“,Å“strÅ“],Å“typeÅ“:Å“otherÅ“}",
          "data": {
            "targetHandle": {
              "fieldName": "input_value",
              "id": "ChatOutput-XPCO0",
              "inputTypes": [
                "Data",
                "DataFrame", 
                "Message",
                "str"
              ],
              "type": "other"
            },
            "sourceHandle": {
              "dataType": "PythonFunction",
              "id": "ContentValidator-5R92L",
              "name": "result",
              "output_types": [
                "str"
              ]
            }
          },
          "id": "edge12",
          "animated": false,
          "className": ""
        }
      ],
      "viewport": {
        "x": -3.7670793745036235,
        "y": -398.731678863361,
        "zoom": 0.6594791460980356
      }
    },
    "description": "Enterprise-ready AI-powered onboarding assistant with data governance and responsible AI principles",
    "name": "SwiftStart Enterprise Onboarding Assistant",
    "last_tested_version": "1.2.0",
    "endpoint_name": null,
    "is_component": false
  }