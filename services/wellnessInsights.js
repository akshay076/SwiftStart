// services/wellnessInsights.js
const langflowService = require('./langflow');
const slackService = require('./slack');
/**
 * Generate AI-driven wellness insights
 * @param {Object} wellnessData - Aggregated wellness data
 * @returns {Promise<Object>} - Insights with key observations and recommendations
 */
async function generateWellnessInsights(wellnessData) {
    try {
      const insightsPrompt = `
  Analyze team wellness data and provide a concise report. 
  
  WELLNESS DATA:
  - Physical Energy: ${wellnessData.physical.score}% (${wellnessData.physical.trend})
  - Mental Well-being: ${wellnessData.mental.score}% (${wellnessData.mental.trend})
  - Social Connection: ${wellnessData.social.score}% (${wellnessData.social.trend})
  - Professional Growth: ${wellnessData.growth.score}% (${wellnessData.growth.trend})
  
  INSTRUCTIONS:
  - Generate insights in max 3 concise bullet points
  - Focus on key trends and critical observations
  - Keep total response under 350 characters
  - Use clear, direct language
  - Highlight potential risks or opportunities
  
  FORMAT YOUR RESPONSE STRICTLY AS:
  **Detailed Trend Analysis**
  Key Observations: [Concise, data-driven insights]
  
  **Recommended Interventions**
  1. [Specific, targeted intervention]
  2. [Specific, targeted intervention]
  3. [Specific, targeted intervention]
  `;
  
      // Call Langflow to generate insights
      const insights = await langflowService.queryLangflow(insightsPrompt);
  
      return insights;
    } catch (error) {
      console.error('Error generating wellness insights:', error);
      return `**Detailed Trend Analysis**
  Key Observations: Mental strain detected, energy improving, growth potential emerging
  
  **Recommended Interventions**
  1. Implement mindfulness programs
  2. Boost team engagement initiatives
  3. Provide skill development resources`;
    }
  }

/**
 * Create Slack blocks for wellness insights
 * @param {string} insights - AI-generated insights text
 * @returns {Array} - Slack message blocks
 */
function createWellnessInsightsBlocks(insights) {
  // Split insights into sections
  const [trendsSection, interventionsSection] = insights.split('**Recommended Interventions**');
  
  return [
    {
      type: "header",
      text: {
        type: "plain_text",
        text: "ðŸŒˆ WellSense360 Team Insights",
        emoji: true
      }
    },
    {
      type: "section",
      text: {
        type: "mrkdwn",
        text: "*Detailed Trend Analysis*\n" + 
              trendsSection.replace('**Detailed Trend Analysis**', '').trim()
      }
    },
    {
      type: "section",
      text: {
        type: "mrkdwn",
        text: "*Recommended Interventions*\n" + 
              interventionsSection.trim()
      }
    },
    {
      type: "context",
      elements: [
        {
          type: "mrkdwn",
          text: "ðŸ’¡ Insights generated by AI, based on anonymized team responses"
        }
      ]
    }
  ];
}

/**
 * Send wellness insights to a Slack channel
 * @param {string} channelId - Slack channel to send insights to
 */
async function sendWellnessInsights(channelId) {
  try {
    // Mock wellness data (in real scenario, aggregate from pulse responses)
    const wellnessData = {
      physical: { score: 75, trend: 'slight increase' },
      mental: { score: 62, trend: 'decrease' },
      social: { score: 85, trend: 'stable' },
      growth: { score: 70, trend: 'increase' }
    };

    // Generate insights
    const insights = await generateWellnessInsights(wellnessData);
    
    // Create Slack blocks
    const insightsBlocks = createWellnessInsightsBlocks(insights);
    
    // Send to Slack
    await slackService.sendMessageWithBlocks(
      channelId, 
      "WellSense360 Team Wellness Insights", 
      insightsBlocks
    );
  } catch (error) {
    console.error('Error sending wellness insights:', error);
    await slackService.sendMessage(
      channelId,
      "Sorry, I couldn't generate insights at this time."
    );
  }
}

module.exports = {
  generateWellnessInsights,
  sendWellnessInsights
};
