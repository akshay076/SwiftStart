// services/wellnessInsights.js
const langflowService = require('./langflow');
const slackService = require('./slack');
/**
 * Generate AI-driven wellness insights
 * @param {Object} wellnessData - Aggregated wellness data
 * @returns {Promise<Object>} - Insights with key observations and recommendations
 */
async function generateWellnessInsights(wellnessData) {
  try {
    // Prepare a structured prompt for Langflow
    const insightsPrompt = `
      Analyze the following team wellness data and provide insights:
      
      Wellness Dimensions:
      - Physical Energy: ${wellnessData.physical.score}%
      - Mental Well-being: ${wellnessData.mental.score}%
      - Social Connection: ${wellnessData.social.score}%
      - Professional Growth: ${wellnessData.growth.score}%

      Trends:
      - Physical Energy: ${wellnessData.physical.trend}
      - Mental Well-being: ${wellnessData.mental.trend}
      - Social Connection: ${wellnessData.social.trend}
      - Professional Growth: ${wellnessData.growth.trend}

      Provide a detailed analysis with:
      1. Key observations across wellness dimensions
      2. Specific, actionable recommended interventions
      3. Brief rationale for recommendations

      Format the response as:
      **Detailed Trend Analysis**
      Key Observations: [3-4 key insights]
      
      **Recommended Interventions**
      1. [Specific intervention]
      2. [Specific intervention]
      3. [Specific intervention]
    `;

    // Call Langflow to generate insights
    const insights = await langflowService.queryLangflow(insightsPrompt);

    return insights;
  } catch (error) {
    console.error('Error generating wellness insights:', error);
    return `Unable to generate insights. Error: ${error.message}`;
  }
}

/**
 * Create Slack blocks for wellness insights
 * @param {string} insights - AI-generated insights text
 * @returns {Array} - Slack message blocks
 */
function createWellnessInsightsBlocks(insights) {
  // Split insights into sections
  const [trendsSection, interventionsSection] = insights.split('**Recommended Interventions**');
  
  return [
    {
      type: "header",
      text: {
        type: "plain_text",
        text: "ðŸŒˆ WellSense360 Team Insights",
        emoji: true
      }
    },
    {
      type: "section",
      text: {
        type: "mrkdwn",
        text: "*Detailed Trend Analysis*\n" + 
              trendsSection.replace('**Detailed Trend Analysis**', '').trim()
      }
    },
    {
      type: "section",
      text: {
        type: "mrkdwn",
        text: "*Recommended Interventions*\n" + 
              interventionsSection.trim()
      }
    },
    {
      type: "context",
      elements: [
        {
          type: "mrkdwn",
          text: "ðŸ’¡ Insights generated by AI, based on anonymized team responses"
        }
      ]
    }
  ];
}

/**
 * Send wellness insights to a Slack channel
 * @param {string} channelId - Slack channel to send insights to
 */
async function sendWellnessInsights(channelId) {
  try {
    // Mock wellness data (in real scenario, aggregate from pulse responses)
    const wellnessData = {
      physical: { score: 75, trend: 'slight increase' },
      mental: { score: 62, trend: 'decrease' },
      social: { score: 85, trend: 'stable' },
      growth: { score: 70, trend: 'increase' }
    };

    // Generate insights
    const insights = await generateWellnessInsights(wellnessData);
    
    // Create Slack blocks
    const insightsBlocks = createWellnessInsightsBlocks(insights);
    
    // Send to Slack
    await slackService.sendMessageWithBlocks(
      channelId, 
      "WellSense360 Team Wellness Insights", 
      insightsBlocks
    );
  } catch (error) {
    console.error('Error sending wellness insights:', error);
    await slackService.sendMessage(
      channelId,
      "Sorry, I couldn't generate insights at this time."
    );
  }
}

module.exports = {
  generateWellnessInsights,
  sendWellnessInsights
};
